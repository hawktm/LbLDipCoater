# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TESTGUI_2_26.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import os
import time
from PyQt5.QtWidgets import QApplication, QWidget, QTableWidget, QComboBox, QVBoxLayout, QMessageBox, QFileDialog
# Import custom GPIO module for motor control movements
import GPIO
from number_pad import numberPopup

class comboCompanies(QComboBox):
    def __init__(self, parent):
        super().__init__(parent)
        self.setStyleSheet('font-size: 25px')
        self.addItems(['1', '2', '3', '4','5','6','7'])
        self.currentIndexChanged.connect(self.getComboValue)

    def getComboValue(self):
        return self.currentText()

class Ui_MAIN(object):
    def setupUi(self, MAIN):
        self.stop = False
        self.x = 0
        self.z = 0
        MAIN.setObjectName("MAIN")
        MAIN.resize(1152, 872)
        MAIN.setStyleSheet("background-color:Grgb(0, 0, 255);\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.centralwidget = QtWidgets.QWidget(MAIN)
        self.centralwidget.setObjectName("centralwidget")
        self.TABS = QtWidgets.QTabWidget(self.centralwidget)
        self.TABS.setGeometry(QtCore.QRect(0, 0, 1152, 862))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.TABS.setFont(font)
        self.TABS.setStyleSheet("background-color:Grey;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.TABS.setObjectName("TABS")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.runbutton = QtWidgets.QPushButton(self.tab, clicked = lambda: startProgram())
        self.runbutton.setGeometry(QtCore.QRect(50, 680, 526, 100))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton.setFont(font)
        self.runbutton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton.setStyleSheet("background-color:Green;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:green;")
        self.runbutton.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton.setCheckable(False)
        self.runbutton.setChecked(False)
        self.runbutton.setObjectName("runbutton")
        self.runbutton_2 = QtWidgets.QPushButton(self.tab, clicked = lambda: stopProgram())
        self.runbutton_2.setGeometry(QtCore.QRect(576, 680, 526, 100))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_2.setFont(font)
        self.runbutton_2.setCheckable(True)
        self.runbutton_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_2.setStyleSheet("background-color:rgb(255, 3, 3);\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:rgb(255, 3, 3);")
        self.runbutton_2.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton_2.setCheckable(False)
        self.runbutton_2.setChecked(False)
        self.runbutton_2.setObjectName("runbutton_2")
        self.Progress = QtWidgets.QProgressBar(self.tab)
        self.Progress.setGeometry(QtCore.QRect(50, 600, 1052, 70))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.Progress.setFont(font)
        self.Progress.setStyleSheet("border-style:outset;\n"
"border-width:4px;\n"
"border-color:black;\n"
"background-color:white;\n"
"")
        self.Progress.setProperty("value", 0)
        self.Progress.setAlignment(QtCore.Qt.AlignCenter)
        self.Progress.setObjectName("Progress")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(50, 20, 640, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(50, 80, 640, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(self.tab)
        self.comboBox.setGeometry(QtCore.QRect(684, 20, 418, 50))
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(50, 150, 300, 420))
        font.setPointSize(20)
        self.tableWidget.setFont(font)
        self.tableWidget.setStyleSheet("border-style:solid;\n"
"border-width:1px;\n"
"border-color:black;\n"
"background-color:white;\n"
"")
        self.tableWidget.setRowCount(25)
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setObjectName("tableWidget")
        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tableWidget.horizontalHeader().setVisible(False)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(280)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(280)
        self.tableWidget.verticalHeader().setVisible(False)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_2.setGeometry(QtCore.QRect(684, 80, 418, 50))
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color:white;")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.TABS.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        font.setPointSize(16)
        self.frame = QtWidgets.QFrame(self.tab)
        self.frame.setGeometry(QtCore.QRect(426, 150, 300, 90))
        self.frame.setStyleSheet("background-color:white;\n"
"")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.comboBox_2 = QtWidgets.QComboBox(self.frame)
        self.comboBox_2.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.comboBox_2.setFont(font)
        self.comboBox_2.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.comboBox_2.setObjectName("comboBox_2")
        self.frame_2 = QtWidgets.QFrame(self.tab)
        self.frame_2.setGeometry(QtCore.QRect(801, 150, 300, 90))
        self.frame_2.setStyleSheet("background-color:white;\n"
"")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        self.label_6.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.comboBox_3 = QtWidgets.QComboBox(self.frame_2)
        self.comboBox_3.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.comboBox_3.setFont(font)
        self.comboBox_3.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.comboBox_3.setObjectName("comboBox_3")
        self.frame_4 = QtWidgets.QFrame(self.tab)
        self.frame_4.setGeometry(QtCore.QRect(426, 260, 300, 90))
        self.frame_4.setStyleSheet("background-color:white;")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.label_7 = QtWidgets.QLabel(self.frame_4)
        self.label_7.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.comboBox_4 = QtWidgets.QComboBox(self.frame_4)
        self.comboBox_4.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.comboBox_4.setFont(font)
        self.comboBox_4.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.comboBox_4.setObjectName("comboBox_4")
        self.frame_5 = QtWidgets.QFrame(self.tab)
        self.frame_5.setGeometry(QtCore.QRect(802, 260, 300, 90))
        self.frame_5.setStyleSheet("background-color:white;")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.label_8 = QtWidgets.QLabel(self.frame_5)
        self.label_8.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.comboBox_5 = QtWidgets.QComboBox(self.frame_5)
        self.comboBox_5.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.comboBox_5.setFont(font)
        self.comboBox_5.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.comboBox_5.setObjectName("comboBox_5")
        self.frame_6 = QtWidgets.QFrame(self.tab)
        self.frame_6.setGeometry(QtCore.QRect(426, 370, 300, 90))
        self.frame_6.setStyleSheet("background-color:white;\n"
"")
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.label_9 = QtWidgets.QLabel(self.frame_6)
        self.label_9.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.comboBox_6 = QtWidgets.QComboBox(self.frame_6)
        self.comboBox_6.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.comboBox_6.setFont(font)
        self.comboBox_6.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.comboBox_6.setObjectName("comboBox_6")
        self.frame_7 = QtWidgets.QFrame(self.tab)
        self.frame_7.setGeometry(QtCore.QRect(802, 370, 300, 90))
        self.frame_7.setStyleSheet("background-color:white;")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.label_10 = QtWidgets.QLabel(self.frame_7)
        self.label_10.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.comboBox_7 = QtWidgets.QComboBox(self.frame_7)
        self.comboBox_7.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.comboBox_7.setFont(font)
        self.comboBox_7.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.comboBox_7.setObjectName("comboBox_7")
        self.frame_8 = QtWidgets.QFrame(self.tab)
        self.frame_8.setGeometry(QtCore.QRect(426, 480, 300, 90))
        self.frame_8.setStyleSheet("background-color:white;\n"
"")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.label_11 = QtWidgets.QLabel(self.frame_8)
        self.label_11.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_11.setFont(font)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.comboBox_8 = QtWidgets.QComboBox(self.frame_8)
        self.comboBox_8.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.comboBox_8.setFont(font)
        self.comboBox_8.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.comboBox_8.setObjectName("comboBox_8")
        self.frame_9 = QtWidgets.QFrame(self.tab)
        self.frame_9.setGeometry(QtCore.QRect(802, 480, 300, 90))
        self.frame_9.setStyleSheet("background-color:white;\n"
"")
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.label_14 = QtWidgets.QLabel(self.frame_9)
        self.label_14.setGeometry(QtCore.QRect(0, 0, 300, 40))
        self.label_14.setFont(font)
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.frame_9, placeholderText="200")
        self.lineEdit_11.setGeometry(QtCore.QRect(0, 40, 300, 50))
        self.lineEdit_11.setFont(font)
        self.lineEdit_11.setStyleSheet("background-color:white;")
        self.lineEdit_11.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.label_16 = QtWidgets.QLabel(self.frame_9)
        self.label_16.setGeometry(QtCore.QRect(210, 50, 81, 31))
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("border-style:outset;\n"
"border-width:0px;\n"
"border-color:black;\n"
"background-color:white;\n"
"")
        self.label_16.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_16.setObjectName("label_16")
        self.label_13 = QtWidgets.QLabel(self.tab_2)
        self.label_13.setGeometry(QtCore.QRect(50, 560, 160, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(210, 560, 341, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setStyleSheet("background-color:white;")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_17 = QtWidgets.QLabel(self.tab_2)
        self.label_17.setGeometry(QtCore.QRect(601, 560, 160, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("background-color:white;")
        self.label_17.setAlignment(QtCore.Qt.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.comboBox_11 = QtWidgets.QComboBox(self.tab_2)
        self.comboBox_11.setGeometry(QtCore.QRect(761, 560, 341, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.comboBox_11.setFont(font)
        self.comboBox_11.setStyleSheet("background-color:white;")
        self.comboBox_11.setObjectName("comboBox_11")
        self.runbutton_6 = QtWidgets.QPushButton(self.tab_2, clicked = lambda: collectprogramsettings())
        self.runbutton_6.setGeometry(QtCore.QRect(426, 640, 300, 75))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_6.setFont(font)
        self.runbutton_6.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_6.setStyleSheet("background-color:Green;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:green;")
        self.runbutton_6.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton_6.setCheckable(False)
        self.runbutton_6.setChecked(False)
        self.runbutton_6.setObjectName("runbutton_6")
        self.runbutton_7 = QtWidgets.QPushButton(self.tab_2, clicked = lambda: deleteprogramsettings())
        self.runbutton_7.setGeometry(QtCore.QRect(802, 640, 300, 75))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_7.setFont(font)
        self.runbutton_7.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_7.setStyleSheet("background-color:rgb(255, 3, 3);\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:rgb(255, 3, 3);")
        self.runbutton_7.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton_7.setCheckable(False)
        self.runbutton_7.setChecked(False)
        self.runbutton_7.setObjectName("runbutton_7")
        self.runbutton_8 = QtWidgets.QPushButton(self.tab_2, clicked = lambda: openprogramfile())
        self.runbutton_8.setGeometry(QtCore.QRect(50, 640, 300, 75))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_8.setFont(font)
        self.runbutton_8.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_8.setStyleSheet("background-color:orange;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:orange;")
        self.runbutton_8.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton_8.setCheckable(False)
        self.runbutton_8.setChecked(False)
        self.runbutton_8.setObjectName("runbutton_8")

        self.label_12 = QtWidgets.QLabel(self.tab_2)
        self.label_12.setGeometry(QtCore.QRect(50, 110, 160, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("background-color:white;")
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.lineEdit = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit.setGeometry(QtCore.QRect(210, 110, 341, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color:white;")
        self.lineEdit.setObjectName("lineEdit")
        self.runbutton_3 = QtWidgets.QPushButton(self.tab_2, clicked = lambda: collectsettings())
        self.runbutton_3.setGeometry(QtCore.QRect(426, 300, 300, 75))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_3.setFont(font)
        self.runbutton_3.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_3.setStyleSheet("background-color:Green;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:green;")
        self.runbutton_3.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton_3.setCheckable(False)
        self.runbutton_3.setChecked(False)
        self.runbutton_3.setObjectName("runbutton_3")
        self.runbutton_4 = QtWidgets.QPushButton(self.tab_2, clicked = lambda: deletesettings())
        self.runbutton_4.setGeometry(QtCore.QRect(802, 300, 300, 75))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_4.setFont(font)
        self.runbutton_4.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_4.setStyleSheet("background-color:rgb(255, 3, 3);\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:rgb(255, 3, 3);")
        self.runbutton_4.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton_4.setCheckable(False)
        self.runbutton_4.setChecked(False)
        self.runbutton_4.setObjectName("runbutton_4")
        self.runbutton_5 = QtWidgets.QPushButton(self.tab_2, clicked = lambda: openfile())
        self.runbutton_5.setGeometry(QtCore.QRect(50, 300, 300, 75))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_5.setFont(font)
        self.runbutton_5.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_5.setStyleSheet("background-color:orange;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:orange;")
        self.runbutton_5.setIconSize(QtCore.QSize(1660, 16))
        self.runbutton_5.setCheckable(False)
        self.runbutton_5.setChecked(False)
        self.runbutton_5.setObjectName("runbutton_5")
        self.label_30 = QtWidgets.QLabel(self.tab_2)
        self.label_30.setGeometry(QtCore.QRect(601, 110, 160, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet("background-color:white;")
        self.label_30.setAlignment(QtCore.Qt.AlignCenter)
        self.label_30.setObjectName("label_30")
        self.comboBox_9 = QtWidgets.QComboBox(self.tab_2)
        self.comboBox_9.setGeometry(QtCore.QRect(761, 110, 341, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.comboBox_9.setFont(font)
        self.comboBox_9.setStyleSheet("background-color:white;")
        self.comboBox_9.setObjectName("comboBox_9")
        self.label_15 = QtWidgets.QLabel(self.tab_2)
        self.label_15.setGeometry(QtCore.QRect(50, 190, 300, 50))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("background-color:white;")
        self.label_15.setAlignment(QtCore.Qt.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.label_18 = QtWidgets.QLabel(self.tab_2)
        self.label_18.setGeometry(QtCore.QRect(426, 190, 300, 50))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("background-color:white;")
        self.label_18.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.pushButton = QtWidgets.QPushButton(self.tab_2)
        self.pushButton.setGeometry(QtCore.QRect(350, 240, 30, 40))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/numberpad.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(30, 40))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.push_button_clicked)
        MAIN.mouseReleaseEvent = self.onClick
        self.pushButton_2 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_2.setGeometry(QtCore.QRect(726, 240, 30, 40))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/numberpad.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon)
        self.pushButton_2.setIconSize(QtCore.QSize(30, 40))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.push_button_clicked2)
        MAIN.mouseReleaseEvent = self.onClick
        self.pushButton_3 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_3.setGeometry(QtCore.QRect(1102, 240, 30, 40))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/numberpad.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon)
        self.pushButton_3.setIconSize(QtCore.QSize(30, 40))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.push_button_clicked3)
        MAIN.mouseReleaseEvent = self.onClick
        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setGeometry(QtCore.QRect(1102, 80, 30, 40))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/numberpad.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_4.setIcon(icon)
        self.pushButton_4.setIconSize(QtCore.QSize(30, 40))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.push_button_clicked4)
        MAIN.mouseReleaseEvent = self.onClick
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_5.setGeometry(QtCore.QRect(50, 240, 300, 50))
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_5.setStyleSheet("background-color:white;")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_6.setGeometry(QtCore.QRect(426, 240, 300, 50))
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_6.setStyleSheet("background-color:white;")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_10.setGeometry(QtCore.QRect(802, 240, 300, 50))
        self.lineEdit_10.setFont(font)
        self.lineEdit_10.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_10.setStyleSheet("background-color:white;")
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.label_28 = QtWidgets.QLabel(self.tab_2)
        self.label_28.setGeometry(QtCore.QRect(802, 190, 300, 50))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("background-color:white;")
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(self.tab_2)
        self.label_29.setGeometry(QtCore.QRect(1012, 250, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(16)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("border-style:outset;\n"
"border-width:0px;\n"
"border-color:black;\n"
"background-color:white;\n"
"")
        self.label_29.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_29.setObjectName("label_29")
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        self.label_20 = QtWidgets.QLabel(self.tab_2)
        self.label_20.setGeometry(QtCore.QRect(260, 250, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(16)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("border-style:outset;\n"
"border-width:0px;\n"
"border-color:black;\n"
"background-color:white;\n"
"")
        self.label_20.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.tab_2)
        self.label_21.setGeometry(QtCore.QRect(636, 250, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(16)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("border-style:outset;\n"
"border-width:0px;\n"
"border-color:black;\n"
"background-color:white;\n"
"")
        self.label_21.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(self.tab_2)
        self.label_22.setGeometry(QtCore.QRect(410, 30, 321, 50))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(True)
        self.label_22.setFont(font)
        self.label_22.setAlignment(QtCore.Qt.AlignCenter)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.tab_2)
        self.label_23.setGeometry(QtCore.QRect(410, 470, 321, 50))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(True)
        self.label_23.setFont(font)
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        self.TABS.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.runbutton_10 = QtWidgets.QPushButton(self.tab_3, clicked = lambda: moveHome())
        self.runbutton_10.setGeometry(QtCore.QRect(501, 360, 150, 150))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_10.setFont(font)
        self.runbutton_10.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_10.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:white;border-radius : 75;")
        self.runbutton_10.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.runbutton_10.setIcon(icon)
        self.runbutton_10.setIconSize(QtCore.QSize(150, 150))
        self.runbutton_10.setCheckable(False)
        self.runbutton_10.setChecked(False)
        self.runbutton_10.setObjectName("runbutton_10")
        self.runbutton_11 = QtWidgets.QPushButton(self.tab_3, clicked = lambda: moveUp())
        self.runbutton_11.setGeometry(QtCore.QRect(451, 135, 250, 150))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_11.setFont(font)
        self.runbutton_11.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_11.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:white;border-radius : 75;")
        self.runbutton_11.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/arrows - up.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.runbutton_11.setIcon(icon1)
        self.runbutton_11.setIconSize(QtCore.QSize(150, 150))
        self.runbutton_11.setCheckable(False)
        self.runbutton_11.setChecked(False)
        self.runbutton_11.setObjectName("runbutton_11")
        self.runbutton_12 = QtWidgets.QPushButton(self.tab_3, clicked = lambda: moveRight())
        self.runbutton_12.setGeometry(QtCore.QRect(726, 310, 150, 250))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_12.setFont(font)
        self.runbutton_12.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_12.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:white;border-radius : 75;")
        self.runbutton_12.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/arrows - right.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.runbutton_12.setIcon(icon2)
        self.runbutton_12.setIconSize(QtCore.QSize(150, 150))
        self.runbutton_12.setCheckable(False)
        self.runbutton_12.setChecked(False)
        self.runbutton_12.setObjectName("runbutton_12")
        self.runbutton_13 = QtWidgets.QPushButton(self.tab_3, clicked = lambda: moveDown())
        self.runbutton_13.setGeometry(QtCore.QRect(451, 585, 250, 150))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_13.setFont(font)
        self.runbutton_13.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_13.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:white;border-radius : 75;")
        self.runbutton_13.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/arrows - down.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.runbutton_13.setIcon(icon3)
        self.runbutton_13.setIconSize(QtCore.QSize(150, 150))
        self.runbutton_13.setCheckable(False)
        self.runbutton_13.setChecked(False)
        self.runbutton_13.setObjectName("runbutton_13")
        self.runbutton_14 = QtWidgets.QPushButton(self.tab_3, clicked = lambda: moveLeft())
        self.runbutton_14.setGeometry(QtCore.QRect(276, 310, 150, 250))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_14.setFont(font)
        self.runbutton_14.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_14.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:white;border-radius : 75;")
        self.runbutton_14.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/arrows - left.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.runbutton_14.setIcon(icon4)
        self.runbutton_14.setIconSize(QtCore.QSize(150, 150))
        self.runbutton_14.setCheckable(False)
        self.runbutton_14.setChecked(False)
        self.runbutton_14.setObjectName("runbutton_14")
        self.comboBox_10 = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_10.setGeometry(QtCore.QRect(356, 20, 100, 50))
        self.comboBox_10.setStyleSheet("background-color:white;")
        font = QtGui.QFont()
        font.setPointSize(20)
        self.comboBox_10.setFont(font)
        self.comboBox_10.setObjectName("comboBox_10")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.label_26 = QtWidgets.QLabel(self.tab_3)
        self.label_26.setGeometry(QtCore.QRect(40, 20, 316, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.label_26.setAlignment(QtCore.Qt.AlignCenter)
        self.label_26.setObjectName("label_26")
        self.runbutton_15 = QtWidgets.QPushButton(self.tab_3, clicked = lambda: moveToPosition(self.comboBox_10.currentText()))
        self.runbutton_15.setGeometry(QtCore.QRect(456, 20, 80, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.runbutton_15.setFont(font)
        self.runbutton_15.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.runbutton_15.setStyleSheet("background-color:red;\n"
"border-style:outset;\n"
"border-width:4px;\n"
"border-color:red;")
        self.runbutton_15.setIconSize(QtCore.QSize(50, 50))
        self.runbutton_15.setCheckable(False)
        self.runbutton_15.setChecked(False)
        self.runbutton_15.setObjectName("runbutton_15")
        self.label_27 = QtWidgets.QLabel(self.tab_3)
        self.label_27.setGeometry(QtCore.QRect(616, 20, 316, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("background-color:white;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-color:black;")
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_9.setGeometry(QtCore.QRect(932, 20, 100, 50))
        self.lineEdit_9.setStyleSheet("background-color:white;")
        font = QtGui.QFont()
        font.setPointSize(20)
        self.lineEdit_9.setFont(font)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.pushButton_5 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_5.setGeometry(QtCore.QRect(1032, 20, 30, 40))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/numberpad.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon)
        self.pushButton_5.setIconSize(QtCore.QSize(30, 40))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.push_button_clicked5)
        MAIN.mouseReleaseEvent = self.onClick
        self.TABS.addTab(self.tab_3, "")
        MAIN.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MAIN)
        self.statusbar.setObjectName("statusbar")
        MAIN.setStatusBar(self.statusbar)

        self.retranslateUi(MAIN)
        self.TABS.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MAIN)

        #Start of my code


#Lets mess with the Table 
        _translate = QtCore.QCoreApplication.translate
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(50, 150, 300, 420))
        font.setPointSize(20)
        self.tableWidget.setFont(font)
        self.tableWidget.setStyleSheet("border-style:solid;\n"
"border-width:1px;\n"
"border-color:black;\n"
"background-color:white;\n"
"")
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(1)
        self.tableWidget.setObjectName("tableWidget")
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(280)
        self.tableWidget.verticalHeader().setDefaultSectionSize(65)
        self.tableWidget.verticalHeader().setVisible(True)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MAIN", "Station Number"))

      


        #006 This code will fill the drop boxes with currently saved files when the program first starts
        path=os.getcwd()+"/Library/Stations"
        dir_list = os.listdir(path)
        dir_list.insert(0,"")
        lengthofdir=len(dir_list)
        X=0
        while X < lengthofdir:
            self.comboBox_2.addItem("")
            self.comboBox_3.addItem("")
            self.comboBox_4.addItem("")
            self.comboBox_5.addItem("")
            self.comboBox_6.addItem("")
            self.comboBox_7.addItem("")
            self.comboBox_8.addItem("")
            self.comboBox_9.addItem("")
            self.comboBox_11.addItem("")
            X=X+1

        #006 This code will fill the drop boxes with currently saved files when the program first starts
        path=os.getcwd()+"/Library/Programs"
        dir_list = os.listdir(path)
        dir_list.insert(0,"")
        lengthofdir=len(dir_list)
        X=0
        while X < lengthofdir:
            self.comboBox_11.addItem("")
            X=X+1

        #007 This will collect the necessary data to be sent out to the program that will run the motors.
        def startProgram():
            self.stop = False
            runorder=[]
            table_length = self.tableWidget.rowCount()
            if self.lineEdit_2.text() == "":
                self.lineEdit_2.insert('1')
            cyclestorun = int(self.lineEdit_2.text())
            cyclesran=0
            self.Progress.setValue(0)
            settings = []
            if (self.lineEdit_11.text() == ""):
                self.lineEdit_11.setText("200")
            
            check=isfloat(self.lineEdit_11.text())
            if (check[0] == False):
                showError("Please enter a numeric value for dip distance")
                return

            dipHeight = float(self.lineEdit_11.text())
            if (dipHeight > 200):
                showError("Max dip distance is 200mm. Enter a value less than or equal to 200.")
                return 
            if (dipHeight <= 0):
                showError("Enter a dip distance greater than 0mm.")
                return 
            print(dipHeight)


            # Check to make sure stations are programmed, show error if not
            for r in range(table_length):
                cellvalue=self.tableWidget.cellWidget(r,0)
                if(cellvalue.currentText() == "1"):
                    station = self.comboBox_2.currentText()
                elif(cellvalue.currentText() == "2"):
                    station = self.comboBox_3.currentText()
                elif(cellvalue.currentText() == "3"):
                    station = self.comboBox_4.currentText()
                elif(cellvalue.currentText() == "4"):
                    station = self.comboBox_5.currentText()
                elif(cellvalue.currentText() == "5"):
                    station = self.comboBox_6.currentText()
                elif(cellvalue.currentText() == "6"):
                    station = self.comboBox_7.currentText()
                elif(cellvalue.currentText() == "7"):
                    station = self.comboBox_8.currentText()
                    
                if (station == ""):
                    showError("No settings programmed for one or more stations")
                    return 
                
                # Save settings for each station
                name=os.getcwd()+"/Library/Stations/"+station
                file1 = open(name,"r")
                data=file1.read()
                data_into_list = data.replace('\n', ',').split(",")
                dwell = float(data_into_list[1])
                dry = float(data_into_list[2])
                firstDip = float(data_into_list[3])
                stationSettings = [dwell, dry, firstDip]
                settings.append(stationSettings)
                file1.close

            moveHome()
            print(settings)
            self.runbutton_2.setEnabled(True)
            print(table_length)

            # Run first cycle with special dip times
            for r in range(table_length):
                self.tableWidget.selectRow(r)
                app.processEvents()
                if self.stop == True:
                    showInfo("Program Cancelled")
                    return
                print(self.tableWidget.currentRow())
                cellvalue=self.tableWidget.cellWidget(r,0)
                runorder.append(cellvalue.currentText())
                moveToPosition(cellvalue.currentText())
                dip(settings[r][2], settings[r][1], dipHeight)
                app.processEvents()
                print(self.stop)
                if self.stop == True:
                    showInfo("Program Cancelled")
                    return
            
            cyclesran = 1
            self.Progress.setValue(int(cyclesran / cyclestorun * 100))

            # Run rest of cycles if applicable
            while cyclesran < cyclestorun:
                for r in range(table_length):
                    self.tableWidget.selectRow(r)
                    app.processEvents()
                    if self.stop == True:
                        showInfo("Program Cancelled")
                        return
                    print(self.tableWidget.currentRow())
                    cellvalue=self.tableWidget.cellWidget(r,0)
                    runorder.append(cellvalue.currentText())
                    moveToPosition(cellvalue.currentText())
                    dip(settings[r][0], settings[r][1], dipHeight)
                    app.processEvents()
                    print(self.stop)
                    if self.stop == True:
                        showInfo("Program Cancelled")
                        return
                    
                cyclesran=cyclesran+1
                self.Progress.setValue(int(cyclesran / cyclestorun * 100))
            moveHome()
            print(runorder)
            print("Program finished")

        def stopProgram():
            print("Program stopped")
            self.stop = True

        def dip(dwell, dry, dipHeight):
            # Move down to dip position and pause for specified time
            distance = dipHeight - self.z # 
            GPIO.moveIt(2, "D", distance*640 , 3200, "sixteenth")
            time.sleep(dwell)

            # Move up to top position and pause for specified time
            GPIO.moveIt(2, "U", dipHeight*640 , 3200, "sixteenth") #
            self.z = 0
            time.sleep(dry)

        def moveHome():
            # Call homing functions using GPIO module functions
            print("Moved home")

            # Attempt at adding GPIO information
            GPIO.homeZ()
            GPIO.homeX()
            self.x = 0
            self.z = 0

        def moveUp():
            # Manual function to move up using GPIO module functions
            if(self.lineEdit_9.text() == ""):
                self.lineEdit_9.setText("0")
            distance=int(self.lineEdit_9.text())
            if (self.z - distance >= 0):
                GPIO.moveIt(2, "U", distance*640 , 6400, "sixteenth")
                print("Moved up")
            else:
                distance = self.z
                GPIO.moveIt(2, "U", distance*640 , 6000, "sixteenth")

            self.z = self.z - distance
            print(self.z)

        def moveRight():
            # Manual function to move left using GPIO module functions
            if(self.lineEdit_9.text() == ""):
                self.lineEdit_9.setText("0")
            distance=int(self.lineEdit_9.text())
            if (self.x - distance >= 0):
                GPIO.moveIt(1, "R", distance*44.44 , 1000, "sixteenth")
                print("Moved right")
            else:
                distance = self.x
                GPIO.moveIt(1, "R", distance*44.44 , 1000, "sixteenth")
            
            self.x = self.x - distance
            print(self.x)

        def moveDown():
            # Manual function to move down using GPIO module functions
            if(self.lineEdit_9.text() == ""):
                self.lineEdit_9.setText("0")
            distance=int(self.lineEdit_9.text())
            if (self.z + distance <= 200): # 
                GPIO.moveIt(2, "D", distance*640 , 6400, "sixteenth")
                print("Moved down")
            else: 
                distance = 200 - self.z #
                GPIO.moveIt(2, "D", distance*640 , 6400, "sixteenth")
        
            self.z = self.z + distance
            print(self.z)

        def moveLeft():
            # Manual function to move right using GPIO module functions
            if(self.lineEdit_9.text() == ""):
                self.lineEdit_9.setText("0")
            distance=int(self.lineEdit_9.text())
            if (self.x + distance <= 588.28):
                GPIO.moveIt(1, "L", distance*44.44 , 1000, "sixteenth")
                print("Moved left")
            else:
                distance = 24146 - self.x
                GPIO.moveIt(1, "L", distance*44.44 , 1000, "sixteenth")
        
            self.x = self.x + distance
            print(self.x)

        def moveToPosition(position):
            # Manual function to move right using GPIO module functions
            distance = 0
            if (position == "1"):
                distance = self.x - 34.78
                self.x = 34.78
            elif (position == "2"):
                distance = self.x - 127.03
                self.x = 127.03
            elif (position == "3"):
                distance = self.x - 219.28
                self.x = 219.28
            elif (position == "4"):
                distance = self.x - 311.53
                self.x = 311.53
            elif (position == "5"):
                distance = self.x - 403.78
                self.x = 403.78
            elif (position == "6"):
                distance = self.x - 496.03
                self.x = 496.03
            elif (position == "7"):
                distance = self.x - 588.28
                self.x = 588.28
            
            if (distance > 0):
                GPIO.moveIt(1, "R", distance*44.44 , 1000, "sixteenth")
                print("Moved right by:", distance)
            else:
                distance = distance*-1
                GPIO.moveIt(1, "L", distance*44.44 , 1000, "sixteenth")
                print("Moved left by:", distance)

            print("Moved to position:", position)
            print(self.x)

        def showError(errorMessage):
            self.msg = QMessageBox() 

            self.msg.setIcon(QMessageBox.Critical)
                
            # setting message for Message Box 
            self.msg.setText(errorMessage)
            
            # setting Message box window title 
            self.msg.setWindowTitle("Error")

            # declaring buttons on Message Box 
            self.msg.setStandardButtons(QMessageBox.Ok) 

            # start the app 
            retval = self.msg.exec_()

        def showInfo(infoMessage):
            self.msg = QMessageBox() 
            self.msg.setIcon(QMessageBox.Information) 
        
            # setting message for Message Box 
            self.msg.setText(infoMessage) 
            
            # setting Message box window title 
            self.msg.setWindowTitle("Information") 
            
            # declaring buttons on Message Box 
            self.msg.setStandardButtons(QMessageBox.Ok) 
            
            # start the app 
            retval = self.msg.exec_()

       #004 This converts strings to floats if possible and returns them as an array with the boolean value in the first position and the value in the second example 45.4 = [True,45.4]
        def isfloat(value): 
            try: 
                return True, float(value) 
            except ValueError: 
                return False, value 
            
        #001 This is used to save settings as a text file. It also verifys that proper values are input before saving.    
        def collectprogramsettings():
            name=self.lineEdit_3.text()
            table_length = self.tableWidget.rowCount()
            settings = []
            if self.lineEdit_2.text() == "":
                self.lineEdit_2.insert('1')
            if (self.lineEdit_11.text() == ""):
                self.lineEdit_11.setText("200")
            
            check=isfloat(self.lineEdit_11.text())
            if (check[0] == False):
                showError("Please enter a numeric value for dip distance")
                return

            dipHeight = float(self.lineEdit_11.text())
            if (dipHeight > 200):
                showError("Max dip distance is 200mm. Enter a value less than or equal to 200.")
                return 
            if (dipHeight <= 0):
                showError("Enter a dip distance greater than 0mm.")
                return 
            print(dipHeight)


            # Check to make sure stations are programmed, show error if not
            for r in range(table_length):
                cellvalue=self.tableWidget.cellWidget(r,0)
                settings.append(cellvalue.currentText())
                settings.append("\n")
                if(cellvalue.currentText() == "1"):
                    station = self.comboBox_2.currentText()
                elif(cellvalue.currentText() == "2"):
                    station = self.comboBox_3.currentText()
                elif(cellvalue.currentText() == "3"):
                    station = self.comboBox_4.currentText()
                elif(cellvalue.currentText() == "4"):
                    station = self.comboBox_5.currentText()
                elif(cellvalue.currentText() == "5"):
                    station = self.comboBox_6.currentText()
                elif(cellvalue.currentText() == "6"):
                    station = self.comboBox_7.currentText()
                elif(cellvalue.currentText() == "7"):
                    station = self.comboBox_8.currentText()
                    
                if (station == ""):
                    showError("No settings programmed for one or more stations")
                    return 
                
                settings.append(station)
                settings.append("\n")

                # Save settings for each station
                name1=os.getcwd()+"/Library/Stations/"+station
                file1 = open(name1,"r")
                data=file1.read()
                data_into_list = data.replace('\n', ',').split(",")
                dwell = data_into_list[1]
                dry = data_into_list[2]
                firstDip = data_into_list[3]
                settings.append(dwell)
                settings.append("\n")
                settings.append(dry)
                settings.append("\n")
                settings.append(firstDip)
                settings.append("\n")
                file1.close

            if name == "":
                showError("Please type a name to save your settings")
                return
            else:
                name= os.getcwd()+"/Library/Programs/"+self.lineEdit_3.text()+".txt"
                names= self.lineEdit_3.text()+".txt"
                file1= open(name,"w")
                file1.writelines(self.lineEdit_3.text())
                file1.writelines("\n")
                file1.writelines(self.lineEdit_2.text())
                file1.writelines("\n")
                file1.writelines(self.lineEdit_11.text())
                file1.writelines("\n")
                file1.writelines(self.comboBox.currentText())
                file1.writelines("\n")
                print(settings)
                file1.writelines(settings)
                file1.close
                isitthere=self.comboBox_11.findText(names)
                path=os.getcwd()+"/Library/Programs"
                dir_list = os.listdir(path)
                dir_list.insert(0,"")
                lengthofdir=len(dir_list)
                H=lengthofdir-1
                if isitthere == -1:    
                    _translate = QtCore.QCoreApplication.translate
                    self.comboBox_11.setItemText(H, _translate("MAIN", names))
                showInfo("Saved Program to Library")

        #002 This is used to delete text files that are selected
        def deleteprogramsettings():
            name=os.getcwd()+"/Library/Programs/"+self.lineEdit_3.text()+".txt"
            names=self.lineEdit_3.text()+".txt"
            if os.path.isfile(name) == True:
                path=os.getcwd()+"/Library/Programs"
                dir_list2= self.comboBox_11.findText(names)
                index = dir_list2
                self.comboBox_11.removeItem(index)
                os.remove(name)
                deletedname="Program --> "+ name + "has been deleted"
                showInfo(deletedname)

            else:
                showError("No file of that name is currently saved to the library")

        #003 opens selected profile for viewing 
        def openprogramfile():
            name=os.getcwd()+"/Library/Programs/"+self.comboBox_11.currentText()
            if os.path.isfile(name) == True:
                file1 = open(name,"r")
                data=file1.read()
                data_into_list = data.replace('\n', ',').split(",")
                print(data_into_list)
                self.lineEdit_3.setText(data_into_list[0])
                self.lineEdit_2.setText(data_into_list[1])
                self.lineEdit_11.setText(data_into_list[2])
                self.comboBox.setCurrentText(data_into_list[3])
                self.adjust_table()
                for r in range(int(data_into_list[3])):
                    self.tableWidget.cellWidget(r,0).setCurrentText(data_into_list[4 + r*5])
                    if(data_into_list[4 + r*5] == "1"):
                        self.comboBox_2.setCurrentText(data_into_list[5 + r*5])
                    elif(data_into_list[4 + r*5] == "2"):
                        self.comboBox_3.setCurrentText(data_into_list[5 + r*5])
                    elif(data_into_list[4 + r*5] == "3"):
                        self.comboBox_4.setCurrentText(data_into_list[5 + r*5])
                    elif(data_into_list[4 + r*5] == "4"):
                        self.comboBox_5.setCurrentText(data_into_list[5 + r*5])
                    elif(data_into_list[4 + r*5] == "5"):
                        self.comboBox_6.setCurrentText(data_into_list[5 + r*5])
                    elif(data_into_list[4 + r*5] == "6"):
                        self.comboBox_7.setCurrentText(data_into_list[5 + r*5])
                    elif(data_into_list[4 + r*5] == "7"):
                        self.comboBox_8.setCurrentText(data_into_list[5 + r*5])

                    name1= os.getcwd()+"/Library/Stations/"+data_into_list[5 + r*5]
                    print(name1)
                    names1= data_into_list[5 + r*5]
                    file2= open(name1,"w")
                    Settings = [data_into_list[5 + r*5],"\n",data_into_list[6 + r*5],"\n",data_into_list[7 + r*5], "\n", data_into_list[8 + r*5]]
                    file2.writelines(Settings)
                    file2.close
                    isitthere=self.comboBox_9.findText(names1)
                    path=os.getcwd()+"/Library/Stations"
                    dir_list = os.listdir(path)
                    dir_list.insert(0,"")
                    lengthofdir=len(dir_list)
                    H=lengthofdir-1
                    if isitthere == -1:    
                        self.comboBox_2.addItem("")
                        self.comboBox_3.addItem("")
                        self.comboBox_4.addItem("")
                        self.comboBox_5.addItem("")
                        self.comboBox_6.addItem("")
                        self.comboBox_7.addItem("")
                        self.comboBox_8.addItem("")        
                        self.comboBox_9.addItem("")
                        _translate = QtCore.QCoreApplication.translate
                        self.comboBox_2.setItemText(H, _translate("MAIN", names1))
                        self.comboBox_3.setItemText(H, _translate("MAIN", names1))
                        self.comboBox_4.setItemText(H, _translate("MAIN", names1))
                        self.comboBox_5.setItemText(H, _translate("MAIN", names1))
                        self.comboBox_6.setItemText(H, _translate("MAIN", names1))
                        self.comboBox_7.setItemText(H, _translate("MAIN", names1))
                        self.comboBox_8.setItemText(H, _translate("MAIN", names1))
                        self.comboBox_9.setItemText(H, _translate("MAIN", names1))
                file1.close
            
       #001 This is used to save settings as a text file. It also verifys that proper values are input before saving.    
        def collectsettings():
            name=self.lineEdit.text()
            dwell=isfloat(self.lineEdit_5.text())
            dry=isfloat(self.lineEdit_6.text())
            firstDip=isfloat(self.lineEdit_10.text())
            if dwell[0] == False or dry[0] == False or firstDip[0] == False:
                showError("Please enter a numeric value for all conditions")
                return
            elif name == "":
                showError("Please type a name to save your settings")
                return
            else:
                name= os.getcwd()+"/Library/Stations/"+self.lineEdit.text()+".txt"
                names= self.lineEdit.text()+".txt"
                file1= open(name,"w")
                Settings = [self.lineEdit.text(),"\n",self.lineEdit_5.text(),"\n",self.lineEdit_6.text(), "\n", self.lineEdit_10.text()]
                print(Settings)
                file1.writelines(Settings)
                file1.close
                isitthere=self.comboBox_9.findText(names)
                path=os.getcwd()+"/Library/Stations"
                dir_list = os.listdir(path)
                dir_list.insert(0,"")
                lengthofdir=len(dir_list)
                H=lengthofdir-1
                if isitthere == -1:    
                    self.comboBox_2.addItem("")
                    self.comboBox_3.addItem("")
                    self.comboBox_4.addItem("")
                    self.comboBox_5.addItem("")
                    self.comboBox_6.addItem("")
                    self.comboBox_7.addItem("")
                    self.comboBox_8.addItem("")        
                    self.comboBox_9.addItem("")
                    _translate = QtCore.QCoreApplication.translate
                    self.comboBox_2.setItemText(H, _translate("MAIN", names))
                    self.comboBox_3.setItemText(H, _translate("MAIN", names))
                    self.comboBox_4.setItemText(H, _translate("MAIN", names))
                    self.comboBox_5.setItemText(H, _translate("MAIN", names))
                    self.comboBox_6.setItemText(H, _translate("MAIN", names))
                    self.comboBox_7.setItemText(H, _translate("MAIN", names))
                    self.comboBox_8.setItemText(H, _translate("MAIN", names))
                    self.comboBox_9.setItemText(H, _translate("MAIN", names))
                showInfo("Saved Station Settings to Library")

        #002 This is used to delete text files that are selected
        def deletesettings():
            name=os.getcwd()+"/Library/Stations/"+self.lineEdit.text()+".txt"
            names=self.lineEdit.text()+".txt"
            if os.path.isfile(name) == True:
                path=os.getcwd()+"/Library/Stations"
                dir_list2= self.comboBox_9.findText(names)
                index = dir_list2
                self.comboBox_2.removeItem(index)
                self.comboBox_3.removeItem(index)
                self.comboBox_4.removeItem(index)
                self.comboBox_5.removeItem(index)
                self.comboBox_6.removeItem(index)
                self.comboBox_7.removeItem(index)
                self.comboBox_8.removeItem(index)
                self.comboBox_9.removeItem(index)
                os.remove(name)
                deletedname="File --> "+ name + "has been deleted"
                showInfo(deletedname)

            else:
                showError("No file of that name is currently saved to the library")

        #003 opens selected profile for viewing 
        def openfile():
            name=os.getcwd()+"/Library/Stations/"+self.comboBox_9.currentText()
            if os.path.isfile(name) == True:
                file1 = open(name,"r")
                data=file1.read()
                data_into_list = data.replace('\n', ',').split(",")
                self.lineEdit.setText(data_into_list[0])
                self.lineEdit_5.setText(data_into_list[1])
                self.lineEdit_6.setText(data_into_list[2])
                self.lineEdit_10.setText(data_into_list[3])
                file1.close
            
        self.retranslateUi(MAIN)
        self.TABS.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MAIN)           

       #005 This will adjust the size of the table based on the value in the combo box
        self.comboBox.activated.connect(self.adjust_table)
        self.lineEdit_2.textChanged.connect(self.isint)

    def adjust_table(self):
        rowcount=self.tableWidget.rowCount()
        rowneed= (int(self.comboBox.currentText()))
        if rowcount < rowneed:
            while rowcount < rowneed:
                self.tableWidget.insertRow(rowcount)
                rowcount = self.tableWidget.rowCount()
                combo= comboCompanies(self.tableWidget)
                self.tableWidget.setCellWidget(rowcount-1,0,combo)

        if rowcount > rowneed:
                while rowcount > rowneed:
                        rowcount = self.tableWidget.rowCount()
                        self.tableWidget.removeRow(rowcount-1)
                        rowcount = self.tableWidget.rowCount()
        
     # this prevents entering non integer values for cycle count 

    def isint(self):
        text=self.lineEdit_2.text()
        if text.isnumeric() == False:
            self.lineEdit_2.backspace()

    def push_button_clicked(self):
        self.tab_2.setEnabled(False)
        self.exPopup = numberPopup(self.tab_2, self.lineEdit_5, "", self.callBackOnSubmit, "Argument 1", "Argument 2")
        self.exPopup.setGeometry(400, 400, 500, 400)
        self.exPopup.show()

    def push_button_clicked2(self):
        self.tab_2.setEnabled(False)
        self.exPopup = numberPopup(self.tab_2, self.lineEdit_6, "", self.callBackOnSubmit, "Argument 1", "Argument 2")
        self.exPopup.setGeometry(750, 400, 500, 400)
        self.exPopup.show()

    def push_button_clicked3(self):
        self.tab_2.setEnabled(False)
        self.exPopup = numberPopup(self.tab_2, self.lineEdit_10, "", self.callBackOnSubmit, "Argument 1", "Argument 2")
        self.exPopup.setGeometry(1000, 400, 500, 400)
        self.exPopup.show()

    def push_button_clicked4(self):
        self.tab.setEnabled(False)
        self.exPopup = numberPopup(self.tab, self.lineEdit_2, "", self.callBackOnSubmit, "Argument 1", "Argument 2")
        self.exPopup.setGeometry(1000, 275, 500, 400)
        self.exPopup.show()

    def push_button_clicked5(self):
        self.tab_3.setEnabled(False)
        self.exPopup = numberPopup(self.tab_3, self.lineEdit_9, "", self.callBackOnSubmit, "Argument 1", "Argument 2")
        self.exPopup.setGeometry(1000, 275, 500, 400)
        self.exPopup.show()

    def onClick(self,e):
        MAIN.setEnabled(True)

    def callBackOnSubmit(self, arg1, arg2): 
        print("Function is called with args: %s & %s" % (arg1, arg2))
    
    def retranslateUi(self, MAIN):
        _translate = QtCore.QCoreApplication.translate

        #This code will fill the drop boxes with currently saved station files 
        path=os.getcwd()+"/Library/Stations"
        dir_list = os.listdir(path)
        dir_list.insert(0,"")
        lengthofdir=len(dir_list)
        X=0
        while X < lengthofdir:
            self.comboBox_2.setItemText(X, _translate("MAIN", dir_list[X]))
            self.comboBox_3.setItemText(X, _translate("MAIN", dir_list[X]))
            self.comboBox_4.setItemText(X, _translate("MAIN", dir_list[X]))
            self.comboBox_5.setItemText(X, _translate("MAIN", dir_list[X]))
            self.comboBox_6.setItemText(X, _translate("MAIN", dir_list[X]))
            self.comboBox_7.setItemText(X, _translate("MAIN", dir_list[X]))
            self.comboBox_8.setItemText(X, _translate("MAIN", dir_list[X]))
            self.comboBox_9.setItemText(X, _translate("MAIN", dir_list[X]))
            X=X+1
        
        #This code will fill the drop boxes with currently saved programs 
        path=os.getcwd()+"/Library/Programs"
        dir_list = os.listdir(path)
        dir_list.insert(0,"")
        lengthofdir=len(dir_list)
        X=0
        while X < lengthofdir:
            self.comboBox_11.setItemText(X, _translate("MAIN", dir_list[X]))
            X=X+1

        # Remove title bar
        MAIN.setWindowFlag(Qt.FramelessWindowHint)
        MAIN.setWindowTitle(_translate("MAIN", "no title"))
        self.runbutton.setText(_translate("MAIN", "RUN"))
        self.runbutton_2.setText(_translate("MAIN", "STOP"))
        self.label.setText(_translate("MAIN", "Number of steps"))
        self.label_3.setText(_translate("MAIN", "Number of cycles"))
        self.comboBox.setItemText(0, _translate("MAIN", "1"))
        self.comboBox.setItemText(1, _translate("MAIN", "2"))
        self.comboBox.setItemText(2, _translate("MAIN", "3"))
        self.comboBox.setItemText(3, _translate("MAIN", "4"))
        self.comboBox.setItemText(4, _translate("MAIN", "5"))
        self.comboBox.setItemText(5, _translate("MAIN", "6"))
        self.comboBox.setItemText(6, _translate("MAIN", "7"))
        self.comboBox.setItemText(7, _translate("MAIN", "8"))
        self.comboBox.setItemText(8, _translate("MAIN", "9"))
        self.comboBox.setItemText(9, _translate("MAIN", "10"))
        self.comboBox.setItemText(10, _translate("MAIN", "11"))
        self.comboBox.setItemText(11, _translate("MAIN", "12"))
        self.comboBox.setItemText(12, _translate("MAIN", "13"))
        self.comboBox.setItemText(13, _translate("MAIN", "14"))
        self.comboBox.setItemText(14, _translate("MAIN", "15"))
        self.comboBox.setItemText(15, _translate("MAIN", "16"))
        self.comboBox.setItemText(16, _translate("MAIN", "17"))
        self.comboBox.setItemText(17, _translate("MAIN", "18"))
        self.comboBox.setItemText(18, _translate("MAIN", "19"))
        self.comboBox.setItemText(19, _translate("MAIN", "20"))
        self.comboBox.setItemText(20, _translate("MAIN", "21"))
        self.comboBox.setItemText(21, _translate("MAIN", "22"))
        self.comboBox.setItemText(22, _translate("MAIN", "23"))
        self.comboBox.setItemText(23, _translate("MAIN", "24"))
        self.comboBox.setItemText(24, _translate("MAIN", "25"))
        self.TABS.setTabText(self.TABS.indexOf(self.tab), _translate("MAIN", "RUN"))
        self.label_5.setText(_translate("MAIN", "Station 1"))
        self.label_6.setText(_translate("MAIN", "Station 2"))
        self.label_7.setText(_translate("MAIN", "Station 3"))
        self.label_8.setText(_translate("MAIN", "Station 4"))
        self.label_9.setText(_translate("MAIN", "Station 5"))
        self.label_10.setText(_translate("MAIN", "Station 6"))
        self.label_11.setText(_translate("MAIN", "Station 7"))
        self.label_14.setText(_translate("MAIN", "Dip Distance"))
        self.label_16.setText(_translate("MAIN", "mm"))
        self.label_13.setText(_translate("MAIN", "Name"))
        self.label_17.setText(_translate("MAIN", "Select"))
        self.runbutton_6.setText(_translate("MAIN", "SAVE"))
        self.runbutton_7.setText(_translate("MAIN", "DELETE"))
        self.runbutton_8.setText(_translate("MAIN", "OPEN"))
        self.label_12.setText(_translate("MAIN", "Name"))
        self.runbutton_3.setText(_translate("MAIN", "SAVE"))
        self.runbutton_4.setText(_translate("MAIN", "DELETE"))
        self.runbutton_5.setText(_translate("MAIN", "OPEN"))
        self.label_15.setText(_translate("MAIN", "Dwell Time"))
        self.label_18.setText(_translate("MAIN", "Dry Time"))
        self.label_20.setText(_translate("MAIN", "sec"))
        self.label_21.setText(_translate("MAIN", "sec"))
        self.label_22.setText(_translate("MAIN", "STATION SETUP"))
        self.label_23.setText(_translate("MAIN", "PROGRAM SETUP"))
        self.label_28.setText(_translate("MAIN", "First Dip Time"))
        self.label_29.setText(_translate("MAIN", "sec"))
        self.label_30.setText(_translate("MAIN", "Select"))
        self.TABS.setTabText(self.TABS.indexOf(self.tab_2), _translate("MAIN", "SETUP"))
        self.comboBox_10.setItemText(0, _translate("MAIN", "1"))
        self.comboBox_10.setItemText(1, _translate("MAIN", "2"))
        self.comboBox_10.setItemText(2, _translate("MAIN", "3"))
        self.comboBox_10.setItemText(3, _translate("MAIN", "4"))
        self.comboBox_10.setItemText(4, _translate("MAIN", "5"))
        self.comboBox_10.setItemText(5, _translate("MAIN", "6"))
        self.comboBox_10.setItemText(6, _translate("MAIN", "7"))
        self.label_26.setText(_translate("MAIN", "Go to Station:"))
        self.runbutton_15.setText(_translate("MAIN", "GO"))
        self.label_27.setText(_translate("MAIN", "Distance to Move:"))
        self.TABS.setTabText(self.TABS.indexOf(self.tab_3), _translate("MAIN", "MANUAL"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MAIN = QtWidgets.QMainWindow()
    ui = Ui_MAIN()
    ui.setupUi(MAIN)
    MAIN.show()
    sys.exit(app.exec_())


